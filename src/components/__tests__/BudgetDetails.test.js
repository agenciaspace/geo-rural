import React from 'react';
import { render, screen, fireEvent, waitFor, act } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';
import '@testing-library/jest-dom';
import BudgetDetails from '../BudgetDetails';
import { useAuth } from '../../hooks/useAuth';
import { db } from '../../config/supabase';

// Mock das depend√™ncias
jest.mock('../../hooks/useAuth');
jest.mock('../../config/supabase');
jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useParams: () => ({ budgetId: 'budget-123' }),
  useNavigate: () => jest.fn(),
}));

// Helper para renderizar componente com Router
const renderWithRouter = (component) => {
  return render(
    <BrowserRouter future={{ v7_startTransition: true, v7_relativeSplatPath: true }}>
      {component}
    </BrowserRouter>
  );
};

// Mock dos dados de teste
const mockBudgetDetails = {
  id: 'budget-123',
  custom_link: 'orcamento-123',
  budget_request: {
    client_name: 'Jo√£o Silva',
    client_email: 'joao@email.com',
    property_name: 'Fazenda S√£o Jos√©',
    city: 'S√£o Paulo',
    state: 'SP',
    vertices_count: 4,
    property_area: 10.5,
    client_type: 'pessoa_fisica',
    description: 'Levantamento topogr√°fico para regulariza√ß√£o'
  },
  budget_result: {
    total_price: 5000,
    breakdown: [
      { item: 'Levantamento topogr√°fico', value: 3000, description: 'Servi√ßo completo' },
      { item: 'Relat√≥rio t√©cnico', value: 2000, description: 'Documenta√ß√£o' }
    ],
    execution_time: '15-20 dias √∫teis',
    validity: '30 dias',
    payment_terms: '√Ä vista com 10% desconto'
  },
  status: 'active',
  created_at: '2024-01-01T10:00:00Z',
  updated_at: '2024-01-01T10:00:00Z',
  timeline: [
    {
      id: '1',
      action: 'created',
      description: 'Or√ßamento criado',
      timestamp: '2024-01-01T10:00:00Z',
      user_name: 'Sistema'
    },
    {
      id: '2',
      action: 'sent',
      description: 'Or√ßamento enviado para cliente',
      timestamp: '2024-01-01T11:00:00Z',
      user_name: 'Admin'
    }
  ]
};

const mockEmptyBudget = {
  id: 'budget-456',
  custom_link: 'orcamento-456',
  budget_request: {
    client_name: 'Maria Santos',
    client_email: 'maria@email.com',
    property_name: 'S√≠tio Esperan√ßa',
    city: 'Rio de Janeiro',
    state: 'RJ',
    vertices_count: 6,
    property_area: 25.0,
    client_type: 'pessoa_juridica'
  },
  budget_result: null,
  status: 'draft',
  created_at: '2024-01-15T14:30:00Z',
  updated_at: '2024-01-15T14:30:00Z',
  timeline: []
};

describe('BudgetDetails', () => {
  beforeEach(() => {
    // Mock do useAuth
    useAuth.mockReturnValue({
      isAuthenticated: true,
      user: { id: 'user1', email: 'user@test.com' }
    });

    // Mock das fun√ß√µes do banco
    db.budgets = {
      getById: jest.fn(),
      update: jest.fn(),
      delete: jest.fn()
    };

    // Reseta os mocks
    jest.clearAllMocks();
  });

  describe('Renderiza√ß√£o inicial', () => {
    test('deve renderizar detalhes do or√ßamento com dados completos', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });

      await act(async () => {
        renderWithRouter(<BudgetDetails />);
      });

      await waitFor(() => {
        expect(screen.getByText('Detalhes do Or√ßamento')).toBeInTheDocument();
        expect(screen.getByText('Jo√£o Silva')).toBeInTheDocument();
        expect(screen.getByText('Fazenda S√£o Jos√©')).toBeInTheDocument();
        expect(screen.getByText('joao@email.com')).toBeInTheDocument();
      }, { timeout: 3000 });
    });

    test('deve chamar fun√ß√£o para carregar or√ßamento na inicializa√ß√£o', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });

      await act(async () => {
        renderWithRouter(<BudgetDetails />);
      });

      await waitFor(() => {
        expect(db.budgets.getById).toHaveBeenCalledWith('budget-123');
      }, { timeout: 3000 });
    });

    test('deve exibir estado de loading durante carregamento', async () => {
      db.budgets.getById.mockImplementation(() => 
        new Promise(resolve => 
          setTimeout(() => resolve({ data: mockBudgetDetails, error: null }), 100)
        )
      );

      await act(async () => {
        renderWithRouter(<BudgetDetails />);
      });

      expect(screen.getByText('Carregando detalhes do or√ßamento...')).toBeInTheDocument();

      await waitFor(() => {
        expect(screen.queryByText('Carregando detalhes do or√ßamento...')).not.toBeInTheDocument();
      }, { timeout: 3000 });
    });
  });

  describe('Exibi√ß√£o de informa√ß√µes do cliente', () => {
    test('deve exibir informa√ß√µes b√°sicas do cliente', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('üë§ Informa√ß√µes do Cliente')).toBeInTheDocument();
        expect(screen.getByText('Jo√£o Silva')).toBeInTheDocument();
        expect(screen.getByText('joao@email.com')).toBeInTheDocument();
        expect(screen.getByText('Pessoa F√≠sica')).toBeInTheDocument();
      });
    });

    test('deve exibir informa√ß√µes da propriedade', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('üèûÔ∏è Informa√ß√µes da Propriedade')).toBeInTheDocument();
        expect(screen.getByText('Fazenda S√£o Jos√©')).toBeInTheDocument();
        expect(screen.getByText('S√£o Paulo - SP')).toBeInTheDocument();
        expect(screen.getByText('4')).toBeInTheDocument(); // vertices
        expect(screen.getByText('10.5 ha')).toBeInTheDocument(); // area
      });
    });

    test('deve exibir descri√ß√£o quando dispon√≠vel', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('Levantamento topogr√°fico para regulariza√ß√£o')).toBeInTheDocument();
      });
    });
  });

  describe('Exibi√ß√£o do resultado do or√ßamento', () => {
    test('deve exibir resultado do or√ßamento quando dispon√≠vel', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('üí∞ Resultado do Or√ßamento')).toBeInTheDocument();
        expect(screen.getByText('R$ 5.000,00')).toBeInTheDocument();
        expect(screen.getByText('Levantamento topogr√°fico')).toBeInTheDocument();
        expect(screen.getByText('R$ 3.000,00')).toBeInTheDocument();
        expect(screen.getByText('Relat√≥rio t√©cnico')).toBeInTheDocument();
        expect(screen.getByText('R$ 2.000,00')).toBeInTheDocument();
      });
    });

    test('deve exibir informa√ß√µes adicionais do or√ßamento', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('15-20 dias √∫teis')).toBeInTheDocument(); // execution_time
        expect(screen.getByText('30 dias')).toBeInTheDocument(); // validity
        expect(screen.getByText('√Ä vista com 10% desconto')).toBeInTheDocument(); // payment_terms
      });
    });

    test('deve exibir mensagem quando or√ßamento n√£o tem resultado', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockEmptyBudget, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('üìù Or√ßamento ainda n√£o foi calculado')).toBeInTheDocument();
      });
    });
  });

  describe('Status e badges', () => {
    test('deve exibir badge de status corretamente', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('Ativo')).toBeInTheDocument();
      });
    });

    test('deve exibir diferentes status corretamente', async () => {
      const budgetApproved = { ...mockBudgetDetails, status: 'approved' };
      db.budgets.getById.mockResolvedValue({ data: budgetApproved, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('Aprovado')).toBeInTheDocument();
      });
    });
  });

  describe('Timeline de atividades', () => {
    test('deve exibir timeline quando dispon√≠vel', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('üìÖ Hist√≥rico de Atividades')).toBeInTheDocument();
        expect(screen.getByText('Or√ßamento criado')).toBeInTheDocument();
        expect(screen.getByText('Or√ßamento enviado para cliente')).toBeInTheDocument();
        expect(screen.getByText('Sistema')).toBeInTheDocument();
        expect(screen.getByText('Admin')).toBeInTheDocument();
      });
    });

    test('deve exibir mensagem quando n√£o h√° atividades', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockEmptyBudget, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('üìÖ Hist√≥rico de Atividades')).toBeInTheDocument();
        expect(screen.getByText('üìù Nenhuma atividade registrada ainda')).toBeInTheDocument();
      });
    });

    test('deve formatar datas da timeline corretamente', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        // Verifica se as datas est√£o formatadas (formato brasileiro)
        expect(screen.getByText(/01\/01\/2024/)).toBeInTheDocument();
      });
    });
  });

  describe('A√ß√µes do or√ßamento', () => {
    test('deve exibir bot√µes de a√ß√£o', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('‚úèÔ∏è Editar Or√ßamento')).toBeInTheDocument();
        expect(screen.getByText('üìß Enviar por Email')).toBeInTheDocument();
        expect(screen.getByText('üìÑ Gerar PDF')).toBeInTheDocument();
        expect(screen.getByText('üóëÔ∏è Excluir')).toBeInTheDocument();
      });
    });

    test('deve confirmar antes de excluir or√ßamento', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });
      window.confirm = jest.fn(() => false);

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        const deleteButton = screen.getByText('üóëÔ∏è Excluir');
        fireEvent.click(deleteButton);
      });

      expect(window.confirm).toHaveBeenCalledWith('Tem certeza que deseja excluir este or√ßamento?');
    });

    test('deve executar exclus√£o quando confirmada', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });
      db.budgets.delete.mockResolvedValue({ data: true, error: null });
      window.confirm = jest.fn(() => true);

      const mockNavigate = jest.fn();
      require('react-router-dom').useNavigate.mockReturnValue(mockNavigate);

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        const deleteButton = screen.getByText('üóëÔ∏è Excluir');
        fireEvent.click(deleteButton);
      });

      await waitFor(() => {
        expect(db.budgets.delete).toHaveBeenCalledWith('budget-123');
      });
    });
  });

  describe('Tratamento de erros', () => {
    test('deve exibir mensagem de erro quando falha ao carregar or√ßamento', async () => {
      db.budgets.getById.mockResolvedValue({ 
        data: null, 
        error: { message: 'Or√ßamento n√£o encontrado' } 
      });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText(/‚ùå.*Erro ao carregar or√ßamento: Or√ßamento n√£o encontrado/)).toBeInTheDocument();
      });
    });

    test('deve exibir bot√£o para tentar novamente em caso de erro', async () => {
      db.budgets.getById.mockResolvedValue({ 
        data: null, 
        error: { message: 'Erro de conex√£o' } 
      });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('üîÑ Tentar Novamente')).toBeInTheDocument();
      });
    });

    test('deve recarregar dados ao clicar em "Tentar Novamente"', async () => {
      db.budgets.getById
        .mockResolvedValueOnce({ data: null, error: { message: 'Erro de conex√£o' } })
        .mockResolvedValueOnce({ data: mockBudgetDetails, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        const retryButton = screen.getByText('üîÑ Tentar Novamente');
        fireEvent.click(retryButton);
      });

      await waitFor(() => {
        expect(screen.getByText('Jo√£o Silva')).toBeInTheDocument();
      });

      expect(db.budgets.getById).toHaveBeenCalledTimes(2);
    });

    test('deve exibir erro quando falha ao excluir or√ßamento', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });
      db.budgets.delete.mockResolvedValue({ 
        data: null, 
        error: { message: 'N√£o foi poss√≠vel excluir' } 
      });
      window.confirm = jest.fn(() => true);

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        const deleteButton = screen.getByText('üóëÔ∏è Excluir');
        fireEvent.click(deleteButton);
      });

      await waitFor(() => {
        expect(screen.getByText(/‚ùå.*Erro ao excluir or√ßamento: N√£o foi poss√≠vel excluir/)).toBeInTheDocument();
      });
    });
  });

  describe('Link p√∫blico', () => {
    test('deve exibir link p√∫blico do or√ßamento', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('üîó Link P√∫blico')).toBeInTheDocument();
        expect(screen.getByText(/orcamento-123/)).toBeInTheDocument();
      });
    });

    test('deve ter bot√£o para copiar link', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('üìã Copiar Link')).toBeInTheDocument();
      });
    });
  });

  describe('Formata√ß√£o de dados', () => {
    test('deve formatar valores monet√°rios corretamente', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('R$ 5.000,00')).toBeInTheDocument();
        expect(screen.getByText('R$ 3.000,00')).toBeInTheDocument();
        expect(screen.getByText('R$ 2.000,00')).toBeInTheDocument();
      });
    });

    test('deve formatar tipo de cliente corretamente', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('Pessoa F√≠sica')).toBeInTheDocument();
      });
    });

    test('deve formatar √°rea da propriedade corretamente', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockBudgetDetails, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('10.5 ha')).toBeInTheDocument();
      });
    });
  });

  describe('Estados condicionais', () => {
    test('deve ocultar se√ß√£o de resultado quando n√£o dispon√≠vel', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockEmptyBudget, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.queryByText('üí∞ Resultado do Or√ßamento')).not.toBeInTheDocument();
        expect(screen.getByText('üìù Or√ßamento ainda n√£o foi calculado')).toBeInTheDocument();
      });
    });

    test('deve ocultar timeline quando vazia', async () => {
      db.budgets.getById.mockResolvedValue({ data: mockEmptyBudget, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.getByText('üìù Nenhuma atividade registrada ainda')).toBeInTheDocument();
      });
    });

    test('deve exibir campos opcionais apenas quando preenchidos', async () => {
      const budgetWithoutOptionalFields = {
        ...mockBudgetDetails,
        budget_request: {
          ...mockBudgetDetails.budget_request,
          description: undefined
        }
      };
      
      db.budgets.getById.mockResolvedValue({ data: budgetWithoutOptionalFields, error: null });

      renderWithRouter(<BudgetDetails />);

      await waitFor(() => {
        expect(screen.queryByText('Levantamento topogr√°fico para regulariza√ß√£o')).not.toBeInTheDocument();
      });
    });
  });
});